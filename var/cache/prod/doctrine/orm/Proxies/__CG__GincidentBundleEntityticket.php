<?php

namespace Proxies\__CG__\GincidentBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ticket extends \GincidentBundle\Entity\ticket implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
  'ok' => NULL,
  'intervenante' => NULL,
  'etat' => NULL,
  'createdby' => NULL,
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
  'ok' => NULL,
  'intervenante' => NULL,
  'etat' => NULL,
  'createdby' => NULL,
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {
        unset($this->ok, $this->intervenante, $this->etat, $this->createdby);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (\array_key_exists($name, self::$lazyPropertiesNames)) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);
            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);

    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (\array_key_exists($name, self::$lazyPropertiesNames)) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (\array_key_exists($name, self::$lazyPropertiesNames)) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'id', 'incidents', 'sol', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'prixuni', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'name', 'brochureFilename', 'Fiche_Tic', 'ok', 'intervenante', 'etat', 'createdby', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'createdat', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'description', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'reference'];
        }

        return ['__isInitialized__', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'id', 'incidents', 'sol', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'prixuni', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'name', 'brochureFilename', 'Fiche_Tic', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'createdat', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'description', '' . "\0" . 'GincidentBundle\\Entity\\ticket' . "\0" . 'reference'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ticket $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->ok, $this->intervenante, $this->etat, $this->createdby);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getSol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSol', []);

        return parent::getSol();
    }

    /**
     * {@inheritDoc}
     */
    public function setSol($sol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSol', [$sol]);

        return parent::setSol($sol);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrixuni()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrixuni', []);

        return parent::getPrixuni();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrixuni($prix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrixuni', [$prix]);

        return parent::setPrixuni($prix);
    }

    /**
     * {@inheritDoc}
     */
    public function getBrochureFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBrochureFilename', []);

        return parent::getBrochureFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function getFiche_Tic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFiche_Tic', []);

        return parent::getFiche_Tic();
    }

    /**
     * {@inheritDoc}
     */
    public function setFiche_Tic($brochureFilename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFiche_Tic', [$brochureFilename]);

        return parent::setFiche_Tic($brochureFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getFicheTic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFicheTic', []);

        return parent::getFicheTic();
    }

    /**
     * {@inheritDoc}
     */
    public function setFicheTic($brochureFilename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFicheTic', [$brochureFilename]);

        return parent::setFicheTic($brochureFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function setBrochureFilename($brochureFilename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBrochureFilename', [$brochureFilename]);

        return parent::setBrochureFilename($brochureFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getIntervenante()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIntervenante', []);

        return parent::getIntervenante();
    }

    /**
     * {@inheritDoc}
     */
    public function setIntervenante($intervenante)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIntervenante', [$intervenante]);

        return parent::setIntervenante($intervenante);
    }

    /**
     * {@inheritDoc}
     */
    public function getEtat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEtat', []);

        return parent::getEtat();
    }

    /**
     * {@inheritDoc}
     */
    public function setEtat($etat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEtat', [$etat]);

        return parent::setEtat($etat);
    }

    /**
     * {@inheritDoc}
     */
    public function getIncidents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIncidents', []);

        return parent::getIncidents();
    }

    /**
     * {@inheritDoc}
     */
    public function setIncidents($incidents)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIncidents', [$incidents]);

        return parent::setIncidents($incidents);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', []);

        return parent::getReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setReference($reference)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReference', [$reference]);

        return parent::setReference($reference);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedby()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedby', []);

        return parent::getCreatedby();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedby($createdby)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedby', [$createdby]);

        return parent::setCreatedby($createdby);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedat(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedat', []);

        return parent::getCreatedat();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedat(\DateTime $createdat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedat', [$createdat]);

        return parent::setCreatedat($createdat);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function addSol(\GincidentBundle\Entity\solutions $sol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSol', [$sol]);

        return parent::addSol($sol);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSol(\GincidentBundle\Entity\solutions $sol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSol', [$sol]);

        return parent::removeSol($sol);
    }

    /**
     * {@inheritDoc}
     */
    public function setOk(\GincidentBundle\Entity\User $ok = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOk', [$ok]);

        return parent::setOk($ok);
    }

    /**
     * {@inheritDoc}
     */
    public function getOk()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOk', []);

        return parent::getOk();
    }

}
